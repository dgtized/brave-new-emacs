#+Title: Brave New Emacs
#+Author: Charles Comstock
#+Date: 3/17/2014
#+Email: dgtized@gmail.com
#+EPRESENT_FRAME_LEVEL: 2

* Preamble
** Instructions

   To follow along locally using Emacs 24;
   #+BEGIN_SRC sh
     git clone https://github.com/dgtized/brave-new-emacs.git
     cd brave-new-emacs
     emacs -q README.org &
   #+END_SRC
   
** Incantations to Setup Presentation

   - Ensure we are not using the default .emacs.d.
   - Unnecessary for an actual configuration
   - Type =C-c C-c= in =BEGIN_SRC= block below to install
   - Press =F7= to start/resume presentation mode (=q= to quit)

   #+BEGIN_SRC emacs-lisp :results silent
     (setq user-emacs-directory (concat (getenv "PWD") "/"))
     (setq package-user-dir (locate-user-emacs-file "elpa"))
     (add-to-list 'load-path user-emacs-directory t)
     ;; From https://raw.github.com/eschulte/epresent/master/epresent.el
     (require 'epresent)
     (global-set-key (kbd "<f7>") 'epresent-run)
     ;; Disable prompting to evaluate babel blocks
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC
   
** Alternate Presentation Mode

   - [[https://github.com/eschulte/epresent][Epresent]] is prettier, and recommended
   - [[https://github.com/takaxp/org-tree-slide][org-tree-slide]] is less invasive, installed on =F8=

   #+BEGIN_SRC emacs-lisp :results silent
     ;; From https://raw.github.com/takaxp/org-tree-slide/master/org-tree-slide.el
     (require 'org-tree-slide)
     (global-set-key (kbd "<f8>") 'org-tree-slide-mode)
     (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
   #+END_SRC

* Init, Modes and Keybindings
** Emacs

  - Binary is an emacs lisp interpreter
  - Majority of functionality is written in elisp
  - No difference between user code and distribution

** Initialization

   Startup loads [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][init files]] prior to giving control to user
   1. [[file:/usr/share/emacs/24.3.50/lisp/loadup.el::%3B%3B%3B%20loadup.el%20---%20load%20up%20standardly%20loaded%20Lisp%20files%20for%20Emacs][loadup.el]] system libraries
   2. Site or distribution
   3. User (=~/.emacs=, =~/.emacs.el= or =~/.emacs.d/init.el=)

** Major Mode

   - Defines how a user interacts with the editor
     syntax tables, derived modes, keybindings, menus
   - Only one active at a time

   Examples:
   - org-mode
   - emacs-lisp-mode
   - eshell-mode
   - minibuffer

** Minor Modes

   As many as you want

   Examples:
   - column-number-mode
   - visual-line-mode
   - flyspell-mode
   - transient-mark-mode
   - show-paren-mode

** Keybindings

   - [[file:/usr/share/emacs/24.3.50/lisp/subr.el.gz::(defvar%20global-map%20nil][Global]]  :: The top level binding
   - [[file:/usr/share/emacs/24.3.50/lisp/bindings.el.gz::(define-key%20ctl-x-map%20"r"%20ctl-x-r-map)][Prefix]]  :: Use prefix and dispatch to new map
   - Minimap :: Temporary mode with different bindings

   Try =C-x C-h= or =C-x a C-h= for binding help for prefix

   Keymaps are inherited or unique

** Keybinding Examples

   |------------+--------------------------|
   | Keybinding | Description              |
   |------------+--------------------------|
   | C-x C-e    | Eval previous expression |
   | C-M-x      | Eval defun               |
   | C-u C-M-x  | Debug defun at point     |
   | TAB        | Org and Magit Toggle     |
   | C-h m      | Mode specific help       |
   | C-h k      | Key specific help        |
   | C-h b      | List all bindings        |
   | C-h f      | Function specific help   |
   | C-c C-c    | Org-mode DWIM at point   |
   |------------+--------------------------|

** Hooks and defadvice

   - Hooks are callbacks to run a list of functions 
     =add-hook=, =remove-hook=, =run-hooks=
     Examples: =org-mode-hook=, =prog-mode-hook=
   - =defadvice= for aspect oriented programming
     =around=, =before=, =after= on any function
   - For extending existing functionality
   
** Bare Necessities

   - Stop asking yes or no, y or n suffice
   - Find library source for any installed library
   - =C-x C-j= to jump to dired for current file

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (defalias 'yes-or-no-p 'y-or-n-p)
     (define-key help-map (kbd "C-l") 'find-library)
     (require 'dired-x)
   #+END_SRC

* Libraries and Packages
** Library

  A file or files containing elisp
  
  - [[file:/usr/share/emacs/24.3.50/lisp/rot13.el.gz::(provide%20'rot13)][rot13]] :: decrypt rot13 library/mode
  - [[file:/usr/share/emacs/24.3.50/lisp/ido.el.gz::%3B%3B%3B%20ido.el%20---%20interactively%20do%20things%20with%20buffers%20and%20files][ido]] :: minor mode extending minibuffer completion
  - [[file:/usr/share/emacs/24.3.50/lisp/simple.el.gz::%3B%3B%3B%20simple.el%20---%20basic%20editing%20commands%20for%20Emacs%20-*-%20lexical-binding:%20t%20-*-][simple]] :: the basic editor commands
  - isearch, linum, byte-compiler, interpeter, edebug, menu

** Load Path

   Where to look for libraries and when to load
    - Load :: Always executes
      : (load "/path/to/library")
    - Provide :: Names a files code 'foo
      : (provide 'foo)
    - Require :: Conditionally load 'foo from =load-path=
      : (require 'foo)
    - Autoload :: Requires 'foo if 'foo-func is used
      : (autoload 'foo-func 'foo)

** Package.el

   - Automatically downloads emacs packages from an archive
   - Updates installed packages
   - Extends =load-path= and generates package autoloads
   - Builtin since Emacs 24

** Package Archives

   - Melpa :: Milkypostman's Emacs Lisp Package Archive
              latest and bleeding edge
   - Marmalade :: Spreadable Elisp
                  versioned and recent
   - ELPA :: Emacs Lisp Package Archive
             Hosted at GNU Savannah, FSF-GPL only

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (require 'package)
     (add-to-list
      'package-archives
      '("melpa" . "https://melpa.org/packages/"))
     (package-initialize)
   #+END_SRC

** Manually Install Packages

   =M-x package-list-packages= and install [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][better-defaults]]

   | i | marks package for Install  |
   | d | marks package for Deletion |
   | x | eXecutes pending           |
   | U | mark Upgrades              |
   | u | Unmark package             |
   | h | Help                       |

** Automatically Install Missing Packages

   Just copy your init.el file and start emacs

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (defun ensure-packages (package-list)
       "Ensures packages in list are installed locally"
       (unless (file-exists-p package-user-dir)
         (package-refresh-contents))
       (dolist (package package-list)
         (unless (package-installed-p package)
           (package-install package))))
     
     (ensure-packages '(better-defaults))
   #+END_SRC

** Package Development

   Keywords in package header

   - Package-Requires :: package dependency list
   - Version :: for specific versions

   [[file:not-in-load-path/github-browse-settings.el::(setq%20github-browse-file-show-line-at-point%20t][github-browse-settings]]

** Example Package

   =M-x package-install-from-file=
   =not-in-load-path/github-browse-settings.el=

   Package is now installed in [[file:elpa][package-user-dir]]

   For development try =package-install-from-buffer=

   To run this automatically;
   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (package-install-file "not-in-load-path/github-browse-settings.el")
     (require 'github-browse-settings)
   #+END_SRC

* Useful Extensions
** Smex

   Smart =M-x=, or Ido for =M-x=

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (ensure-packages '(smex))
     (global-set-key (kbd "C-x C-m") 'smex)
     (global-set-key (kbd "C-c C-m") 'smex-major-mode-commands)
   #+END_SRC

** Avy / Ace Jump Mode

   Faster than a speeding mouse!

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (ensure-packages '(avy))
     (global-set-key (kbd "C-;") 'avy-goto-word-or-subword-1)
     (global-set-key (kbd "C-M-;") 'avy-pop-mark)
   #+END_SRC

** Magit

   [[https://github.com/magit/magit][magit]] is friends with git

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (ensure-packages '(magit))
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

   - magit-blame-mode :: Inline blame mode
   - magit-file-log :: Show git log for file

** Projectile

   [[https://github.com/bbatsov/projectile][projectile]] uses version control to define a project

   Try =C-c p C-h= to see all it provides

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (ensure-packages '(projectile))
     (projectile-global-mode)
   #+END_SRC

** Emacs Slime Navigation

   Quickly navigate to function at point in elisp
   | M-. | jump to function     |
   | M-, | return to last point |

   Eldoc is builtin and shows function arguments in minibuffer

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (ensure-packages '(elisp-slime-nav))
     (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
       (add-hook hook 'turn-on-elisp-slime-nav-mode)
       (add-hook hook 'turn-on-eldoc-mode))
   #+END_SRC

** Themes!

   Zenburn is a nice dark theme

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (ensure-packages '(zenburn-theme))
     (load-theme 'zenburn t)
   #+END_SRC

** Org Links

   Org can create links like so:
   : [[href][name]]

   #+BEGIN_SRC emacs-lisp :tangle init.el :results silent
     (global-set-key (kbd "C-c l") 'org-store-link)
   #+END_SRC

   =C-c C-l= to link in org-mode, =C-c C-o= to [[*Org%20Links][visit]]

* Demo

  Type =C-c C-v t= to generate =init.el= from this file.

  At the terminal:
  #+BEGIN_SRC sh
    emacs -q -l init.el &
  #+END_SRC

  Use C-c ' to edit =BEGIN_SRC= blocks in their own major mode

* Questions or Comments?
