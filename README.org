#+Title: Brave New Emacs
#+Author: Charles Comstock <dgtized@gmail.com>
#+EPRESENT_FRAME_LEVEL: 1

* Overview
  - Background on Init, Modes, and Keybindings
  - Package.el and init.el
  - Automatically installing packages
  - Example Packages

* Witchcraft For Presentation

  Start emacs 24 and follow along
  : emacs -q README.org &

  - Ensure we are not using the default .emacs.d.
  - Unnecessary for an actual configuration

  #+BEGIN_SRC emacs-lisp
    (setq user-emacs-directory (getenv "PWD"))
    (setq package-user-dir (locate-user-emacs-file "elpa"))
    (add-to-list 'load-path user-emacs-directory t)
    ;; From https://raw.github.com/takaxp/org-tree-slide/master/org-tree-slide.el
    (require 'org-tree-slide)
    (global-set-key (kbd "<f8>") 'org-tree-slide-mode)
    (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
  #+END_SRC

* Emacs
  - Binary is an emacs lisp interpreter
  - Majority of functionality is written in elisp
  - Very little distinction between user code and distribution

* Emacs Init
  Loads [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][init files]] in order before giving control to user
  - Site or distribution
  - User (~/.emacs, ~/.emacs.el or ~/.emacs.d/init.el)

* Major Mode
  - Defines how a user interacts with the editor
  - Only one active at a time

  Examples:
  - org-mode
  - emacs-lisp-mode
  - eshell-mode
  - minibuffer

* Minor Modes
  As many as you want

  Examples:
  - column-number-mode
  - visual-line-mode
  - flyspell-mode
  - transient-mark-mode
  - show-paren-mode

* Keybindings
  - [[file:/usr/share/emacs/24.3.50/lisp/subr.el.gz::(defvar%20global-map%20nil][Global]]  :: The top level binding
  - [[file:/usr/share/emacs/24.3.50/lisp/bindings.el.gz::(define-key%20ctl-x-map%20"r"%20ctl-x-r-map)][Prefix]]  :: Use prefix and dispatch to new map
  - Minimap :: Temporary mode with different bindings
               Try C-x C-h or C-x a C-h

  Keymaps are inherited or unique

* Keybinding Examples
  - C-x C-e :: Eval previous expression
  - C-M-x :: Eval defun
  - C-u C-M-x :: Debug defun at point
  - TAB :: Org and Magit Toggle
  - C-h m :: Mode specific help
  - C-h k :: Key specific help
  - C-h f :: Function specific help
  - C-c C-c :: Org-mode DWIM at point

* Packages

  A file or files containing elisp
  
  - [[file:/usr/share/emacs/24.3.50/lisp/rot13.el.gz::(provide%20'rot13)][rot13]] :: decrypt rot13 library/mode
  - [[file:/usr/share/emacs/24.3.50/lisp/ido.el.gz::%3B%3B%3B%20ido.el%20---%20interactively%20do%20things%20with%20buffers%20and%20files][ido]] :: minor mode extending minibuffer completion
  - [[file:/usr/share/emacs/24.3.50/lisp/simple.el.gz::%3B%3B%3B%20simple.el%20---%20basic%20editing%20commands%20for%20Emacs%20-*-%20lexical-binding:%20t%20-*-][simple]] :: the basic editor commands
  - isearch, linum, byte-compiler, interpeter, edebug, menu

* Load, Require and Autoload
** Load
   : (load "/path/to/library")
   Always executes
** Provide
   : (provide 'foo)
   Names a files code 'foo
** Require
   : (require 'foo)
   Conditionally load 'foo from load-path
** Autoload
   : (autoload 'foo-func 'foo)
   Requires 'foo if 'foo-func is used

* Package.el

  - Automatically downloads emacs packages from an archive
  - Updates installed packages
  - Extends load-path and generates package autoloads
  - Builtin since Emacs 24

* Install MELPA
  - Melpa :: Milkypostman's Emacs Lisp Package Archive
             latest and bleeding edge
  - Marmalade :: Spreadable Elisp
                 versioned and recent
  - ELPA :: Emacs Lisp Package Archive
            Hosted at GNU Savannah, FSF-GPL only

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (require 'package)
    (add-to-list
     'package-archives
     '("melpa" . "http://melpa.milkbox.net/packages/"))
    (package-initialize)
  #+END_SRC

* Manually Install Packages

  M-x package-lisp-packages - install [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][better-defaults]]

  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode t) ;; for presentation
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (defalias 'yes-or-no-p 'y-or-n-p)
    (define-key help-map (kbd "C-l") 'find-library)
    (require 'dired-x) ;; C-x C-j dired-jump
  #+END_SRC

* Automatically Install Missing Packages

  Just copy your init file and start emacs

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (defun ensure-packages (package-list)
      "Ensures packages in list are installed locally"
      (unless (file-exists-p package-user-dir)
        (package-refresh-contents))
      (dolist (package package-list)
        (unless (package-installed-p package)
          (package-install package))))
    
    (ensure-packages '(better-defaults))
  #+END_SRC

* Smex

  Smart M-x, or Ido for M-x

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (ensure-packages '(smex))
    (global-set-key (kbd "C-x C-m") 'smex)
  #+END_SRC

* Ace Jump Mode

  Faster than a speeding mouse!

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (ensure-packages '(ace-jump-mode))
    (global-set-key (kbd "C-;")
                    'ace-jump-mode)
    (global-set-key (kbd "C-M-;") 
                    'ace-jump-mode-pop-mark)
  #+END_SRC

* Magit

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (ensure-packages '(magit))
    (global-set-key (kbd "C-x g") 'magit-status)
  #+END_SRC

  - magit-blame-mode :: Inline blame mode
  - magit-file-log :: Show git log for file

* Themes!

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (ensure-packages '(zenburn-theme))
    (load-theme 'zenburn t)
  #+END_SRC

* Comments or Questions?

  #+BEGIN_SRC emacs-lisp :tangle init.el
    (global-set-key (kbd "C-c l") 'org-store-link)
  #+END_SRC

  C-c C-l to link in org-mode, C-c C-o to visit
